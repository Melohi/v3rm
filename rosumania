if game:GetService("CoreGui"):FindFirstChild("ScreenGui") then
    game:GetService("CoreGui").ScreenGui:Destroy()
end

local vim = game:GetService('VirtualInputManager')
local plr = game:GetService('Players').LocalPlayer
local Root = plr.Character.HumanoidRootPart

local excludedChildren = {
    "BubbleChat",
    "Chat",
    "DebugUI",
    "TopbarPlus"
}

local function pressKey(key)
    vim:SendKeyEvent(true, key, false, game)
end

local function releaseKey(key)
    vim:SendKeyEvent(false, key, false, game)
end

local function getValidChildrenNames(parent, excludedNames)
    local validNames = {}
    for _, child in pairs(parent:GetChildren()) do
        local isExcluded = false
        for _, excludedName in ipairs(excludedNames) do
            if child.Name == excludedName then
                isExcluded = true
                break
            end
        end
        if not isExcluded then
            table.insert(validNames, child.Name)
        end
    end
    return validNames
end

local validChildrenNames = getValidChildrenNames(game:GetService("Players").LocalPlayer.PlayerGui, excludedChildren)

for _, name in ipairs(validChildrenNames) do
    local UIS = game:GetService("UserInputService")
    local mouse = plr:GetMouse()


    local Library = loadstring(game:HttpGet("https://pastebin.com/raw/GE2vpe9i", true))()


    local Window = Library:CreateWindow"rosu! mania"

    local offset = 0.05

    Window:AddSlider({
        text = "Hit Timing Offset",
        flag = "OffsetAmount",
        value = whatthefuck,
        min = 0.01,
        max = 0.05,
        float = 0.001,
        callback = function(value)
            offset = value
        end
    })

    function Hit(key, hold, release)
        if not hold and not release then
            pressKey(key)
        elseif hold then
            pressKey(key)
        elseif release then
            releaseKey(key)
        end
    end

    if not _G.connections then
        _G.connections = {}
    end

    for i, v in pairs(_G.connections) do
        v:Disconnect()
    end

    _G.connections = {}

    local AutoPlayToggle = Window:AddToggle({
        text = 'Enabled',
        flag = 'autoplay',
        state = false,
        callback = function(value)
            if state == true then
                state = false
                for i, v in pairs(_G.connections) do
                    v:Disconnect()
                end
                _G.connections = {}
            else
                state = true
                for a, b in pairs(plr.PlayerGui[name].GameplayFrame.Tracks:GetChildren()) do
                    if b and b:IsA("Frame") then
                        local key
                        if b.Name == "Track1" then
                            key = plr.PlayerGui[name].MENUS.OptionsFrame.Input.Keyboard.Lane1.Text
                        elseif b.Name == "Track2" then
                            key = plr.PlayerGui[name].MENUS.OptionsFrame.Input.Keyboard.Lane2.Text
                        elseif b.Name == "Track3" then
                            key = plr.PlayerGui[name].MENUS.OptionsFrame.Input.Keyboard.Lane3.Text
                        elseif b.Name == "Track4" then
                            key = plr.PlayerGui[name].MENUS.OptionsFrame.Input.Keyboard.Lane4.Text
                        end
                        local con = b.ChildAdded:Connect(function(child)
                            if state == true then
                                if child:IsA("Frame") then
                                    local hit = false
                                    while state == true and child and not hit do
                                        game:GetService('RunService').Stepped:wait()
                                        if child.Position.Y.Scale >= .98 then
                                            hit = true
                                            pressKey(key)
                                            task.wait(offset)
                                            releaseKey(key)
                                        end
                                        if not child then
                                            hit = true
                                        end
                                    end
                                elseif child:IsA("Folder") then
                                    local hit = false
                                    while state == true and child and not hit do
                                        game:GetService('RunService').Stepped:wait()
                                        if child.Head.Position.Y.Scale >= .98 then
                                            pressKey(key)
                                        end
                                        if child.Tail.Position.Y.Scale >= .98 then
                                            releaseKey(key)
                                            hit = true
                                        end
                                        if not child then
                                            hit = true
                                        end
                                    end
                                end
                            end
                        end)
                        table.insert(_G.connections, con)
                    end
                end
                game:GetService('RunService').Stepped:wait()
            end
        end
    })

    Window:AddBind({
        text = "Toggle UI",
        key = "LeftControl",
        callback = function()
            Library:Close()
        end
    })

    Library:Init()
end
